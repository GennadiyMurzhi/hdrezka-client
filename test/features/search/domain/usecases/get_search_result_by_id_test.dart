import 'package:dartz/dartz.dart';
import 'package:hdrezka_client/core/entities/film_information.dart';
import 'package:hdrezka_client/core/models/film_information_model.dart';
import 'package:hdrezka_client/features/search/domain/entities/search_result.dart';
import 'package:hdrezka_client/features/search/domain/repositories/search_result_repositories.dart';
import 'package:hdrezka_client/features/search/domain/usecases/get_search_result_by_id.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:flutter_test/flutter_test.dart';

// Mocks generated by Mockito 5.0.16 from annotations
// in hdrezka_client/test/features/search/domain/usecases/get_search_result_by_query_test.dart.
// Do not manually edit this file.
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hdrezka_client/core/error/failure.dart' as _i5;
import 'package:hdrezka_client/features/search/domain/entities/search_result.dart'
as _i6;
import 'package:hdrezka_client/features/search/domain/repositories/search_result_repositories.dart'
as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [SearchResultRepository].
///
/// See the documentation for Mockito's code generation for more information.
class SearchResultRepositoryMock extends _i1.Mock
    implements _i3.SearchResultRepository {
  SearchResultRepositoryMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.SearchResult>> getSearchResultByQuery(
      String? query) =>
      (super.noSuchMethod(Invocation.method(#getSearchResultByQuery, [query]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.SearchResult>>.value(
              _FakeEither_0<_i5.Failure, _i6.SearchResult>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.SearchResult>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.SearchResult>> getSearchResultById(
      int? id) =>
      (super.noSuchMethod(Invocation.method(#getSearchResultById, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.SearchResult>>.value(
              _FakeEither_0<_i5.Failure, _i6.SearchResult>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.SearchResult>>);
  @override
  String toString() => super.toString();
}

/*class MockSearchResultRepository extends Mock
    implements SearchResultRepository {}*/

//@GenerateMocks([], customMocks: [MockSpec<SearchResultRepository>(as: #SearchResultRepositoryMock)])
void main() {

  SearchResultRepositoryMock? mockSearchResultRepository;
  GetSearchResultById? usecase;

  setUp((){
    mockSearchResultRepository = SearchResultRepositoryMock();
    usecase = GetSearchResultById(mockSearchResultRepository!);
  });

  const int id = 1;
  const String query = 'query';
  final List<FilmInformation> payload = [FilmInformationModel(
      url: "https://rezka.ag/films/fantasy/41834-snova-privet-1987.html",
      name: "Снова привет",
      type: "films",
      imageUrl: "https://static.hdrezka.ac/i/2021/9/19/r664889dc807fud75o25d.jpg",
      addition: "1987, США, Фэнтези"
  )];
  const String status = 'created';
  final DateTime created = DateTime.parse('2021-10-03T22:00:07.000000Z');
  final DateTime updated = DateTime.parse('2021-10-03T22:00:07.000000Z');

  final SearchResult searchResult = SearchResult(
      id: id,
      query: query,
      payload: payload,
      status: status,
      created: created,
      updated: updated
  );

  test('should get search result for the repository by id', () async {
    //arrange
    when(mockSearchResultRepository!.getSearchResultById(any))
        .thenAnswer((realInvocation) async => Right(searchResult));
    //act
    final result = await usecase!(
        Params(id: id)
    );
    //assert
    expect(result, Right(searchResult));
    verify(mockSearchResultRepository!.getSearchResultById(id));
    verifyNoMoreInteractions(mockSearchResultRepository!);
  });

}